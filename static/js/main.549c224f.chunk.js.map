{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","myRenderer","marked","Renderer","heading","text","level","concat","paragraph","placeHolderText","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","marktext","retrieveTextContent","bind","assertThisInitialized","returnedText","setState","react_default","a","createElement","id","App_EditorArea","content","getText","App_PreviewArea","previewContent","Component","EditorArea","_this2","getTextContent","e","target","value","document","getElementById","textContent","onChange","PreviewArea","renderedHtml","renderer","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mNCOlCC,EAAa,IAAIC,IAAOC,SAC9BF,EAAWG,QAAU,SAAUC,EAAMC,GAErC,YAAAC,OAAaD,EAAb,iBAAAC,OACYF,EADZ,mBAAAE,OAEeD,EAFf,MAKAL,EAAWO,UAAY,SAAUH,GAEjC,yBAAAE,OACYF,EADZ,qBAeA,IAAMI,EAAe,o8BAwCfC,cACJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAWX,GAGbG,EAAKS,oBAAsBT,EAAKS,oBAAoBC,KAAzBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANXA,mFASEY,GAClBT,KAAKU,SACH,CACEL,SAAUI,qCAKd,OACEE,EAAAC,EAAAC,cAAA,OAAKC,GAAG,kBACRH,EAAAC,EAAAC,cAACE,EAAD,CAAYC,QAAShB,KAAKI,MAAMC,SAAUY,QAASjB,KAAKM,sBACxDK,EAAAC,EAAAC,cAACK,EAAD,CAAaC,eAAgBnB,KAAKI,MAAMC,mBArB5Be,aA6BZC,cACJ,SAAAA,EAAYzB,GAAM,IAAA0B,EAAA,OAAAxB,OAAAC,EAAA,EAAAD,CAAAE,KAAAqB,IAChBC,EAAAxB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuB,GAAAlB,KAAAH,KAAMJ,KACD2B,eAAiBD,EAAKC,eAAehB,KAApBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAwB,KAFNA,8EAIHE,GACOrC,IAAOC,SAASoC,EAAEC,OAAOC,OACrBC,SAASC,eAAe,kBACnBC,YAC7B7B,KAAKJ,MAAMqB,QAAQO,EAAEC,OAAOC,wCAI7B,IAAIV,EAAUhB,KAAKJ,MAAMoB,QAExB,OAEEL,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UACRH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aAAR,UACAH,EAAAC,EAAAC,cAAA,YAAUC,GAAG,iBAAiBgB,SAAU9B,KAAKuB,eAAgBG,MAAOV,YAnBjDI,aA0BnBW,cACJ,SAAAA,EAAYnC,GAAO,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAA+B,GAAAjC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiC,GAAA5B,KAAAH,KACXJ,0EAKV,IAAMoC,EAAe7C,IAAOa,KAAKJ,MAAMuB,eAAgB,CAAEc,SAAU/C,IACjE,OAEEyB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACRH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,cAAR,oBACAH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,cAAcoB,wBAAyB,CAACC,OAASH,aAZnCZ,aAwBXzB,IC3IKyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAAShB,SAASC,eAAe,SD2H3C,kBAAmBgB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.549c224f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport marked from 'marked';\n\n\n//var markedDown = require('marked');\nconst myRenderer = new marked.Renderer();\nmyRenderer.heading = function (text, level) {\n  \nreturn ` <h${level}>\n          ${text}\n          </h${level}>`;\n};\n\nmyRenderer.paragraph = function (text) {\n  \nreturn ` <p>\n          ${text}\n          </p>`;\n};\n\n/*myRenderer.list = function (text) {\n  \n  return ` <li style=\"color:green\">\n            ${text}\n            </li>`;\n};*/\n\n\n\n//place holder text for the editor\nconst placeHolderText = `# Hello this is my Markdown Live Preview \n\n                        \n## This is a subheading !!!!\n### And now you can make your heading a little more smaller\n\nCurious, what is markdown is ? [check here](https://en.wikipedia.org/wiki/Markdown)\n> It's a lightweight markup language .......\n## Usage (Check simultaneously the List feature):\n1. Write Markdown text here following the syntax\n2. Check the magic result in the corresponding preview area\nYou can also write inline code between two backticks such as \\`<p>Here you Go</p>\\`\nMultiline code goes here,\n\n\\`\\`\\`\\`\n(function(){\n alert(\"Do cool stuff and make a difference !!!! \");\n})();\n\\`\\`\\`\\`\n\nFor sure there are\n> Block Quotes!\n\nBulleted List is also possible !\n- Here you go\n - Can make nesting too\n   - May be one more level\n\n### Quick text styling reference\n* **bold**\n* _italics_\n* **_both_**\n* ~~cross that stuff out right NOW~~\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\n\n\n/*State will be maintained in App. The child components EditorArea and \nPreviewArea will be changed and updated as per state changes here*/ \nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      marktext : placeHolderText\n    };\n\n    this.retrieveTextContent = this.retrieveTextContent.bind(this);\n  }\n\n  retrieveTextContent(returnedText){\n    this.setState(\n      {\n        marktext: returnedText,\n\n     });\n  }\n  render() {\n    return (\n      <div id=\"mainDivFlexbox\">\n      <EditorArea content={this.state.marktext} getText={this.retrieveTextContent}/>\n      <PreviewArea previewContent={this.state.marktext}/>\n      </div>\n      \n    );\n  }\n}\n\n//Editing area\nclass EditorArea extends Component {\n  constructor(props){\n    super(props);\n    this.getTextContent = this.getTextContent.bind(this);\n  }\n  getTextContent(e){\n      let renderedVal = marked.Renderer(e.target.value);\n      let contenteditable = document.getElementById('editortextarea');\n      let text = contenteditable.textContent;\n    this.props.getText(e.target.value);\n    }\n  \n  render(){\n   let content = this.props.content;\n   \n    return (\n\n      <div id=\"editor\">\n      <div id=\"editorbar\">Editor</div>\n      <textarea id=\"editortextarea\" onChange={this.getTextContent} value={content}/>\n      </div>\n    )\n  }\n}\n\n//preview component\nclass PreviewArea extends Component{\n  constructor(props){\n    super(props);\n  }\n\n  render(){\n    //console.log(\"this.props.previewContent , \",this.props.previewContent);\nconst renderedHtml = marked(this.props.previewContent, { renderer: myRenderer });\n  return (\n\n    <div id='preview'>\n    <div id=\"previewbar\">Markdown Preview</div>\n    <div id='previewText' dangerouslySetInnerHTML={{__html : renderedHtml}} />\n    </div>\n  )\n\n  }\n\n\n\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}